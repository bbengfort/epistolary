// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_initial_schema.down.sql (500B)
// 000001_initial_schema.up.sql (4.798kB)
// 000002_default_roles.down.sql (81B)
// 000002_default_roles.up.sql (869B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x5b\x6a\x32\x41\x10\x85\xdf\x67\x15\xb5\x01\x57\xe0\xd3\xaf\xff\x18\x1a\xe2\x85\x38\xb9\x3d\x0d\xed\xf4\x99\xa1\xc8\xf4\x85\xae\xea\x04\x77\x1f\xd4\x44\x14\x14\xf2\x7c\x4e\x7d\x9c\xaf\x66\xf5\x83\x59\x4d\xab\x6a\x32\x21\x97\x63\xa2\x4f\xc6\x97\x50\xcf\x59\x94\x34\x12\x82\x94\x0c\x52\xbb\x1b\x21\xd4\xd9\x40\x3b\x1c\x8b\x09\xae\xfa\xff\xb4\xde\xd0\x8b\xa9\x5f\xc9\x2c\xa8\x7e\x33\xdb\x66\x4b\x45\x90\xdb\x84\xec\x59\x84\x63\x90\x0b\xf4\x0f\x84\x03\xc5\xec\x90\x29\xf6\xd4\xc7\x0c\x1e\x02\x7d\x60\x4f\x0e\x09\xc1\x21\x74\x0c\x39\xa1\x9b\x7f\xb3\xc7\xfa\x82\x9d\xe3\x88\x6b\xf6\xed\x1a\xac\xe3\x30\xdc\x49\xff\x70\x1f\x47\xdc\xcb\x0e\x7a\xf7\x32\x24\x16\x3d\x9e\x9e\x95\x11\x8a\x17\xb2\xc1\x51\x57\x44\xa3\x27\xdd\xa7\xb3\xdd\xfb\xe6\xc6\xea\x56\xd4\x6a\xb9\x7a\x5b\xe6\x61\x40\x3e\x61\xfa\x12\x3a\x3d\x6c\xa7\xd1\x8a\x9e\x40\x8b\xe7\xd5\xbc\x31\xeb\xd5\x6f\xb3\x15\x68\xeb\xa3\xe3\x9e\xe1\x5a\x65\x0f\x51\xeb\xd3\xb4\xaa\xe6\xeb\xe5\xd2\x34\xd3\xef\x00\x00\x00\xff\xff\x4d\xcf\x46\x36\xf4\x01\x00\x00")

func _000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaDownSql,
		"000001_initial_schema.down.sql",
	)
}

func _000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.down.sql", size: 500, mode: os.FileMode(0644), modTime: time.Unix(1667829363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xe3, 0x10, 0x82, 0x70, 0xee, 0x2f, 0xec, 0x31, 0x14, 0x6c, 0x92, 0xde, 0xfc, 0x6, 0x9f, 0x8d, 0xd0, 0x50, 0x51, 0x16, 0x84, 0x38, 0x39, 0x37, 0x71, 0x6b, 0x9a, 0xe3, 0x0, 0x5a, 0x43}}
	return a, nil
}

var __000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x41\x6f\xdb\x38\x13\xbd\xeb\x57\xcc\x21\x40\xe2\x22\x71\xf3\x15\x5f\x17\x58\x18\x3d\xa8\x32\x9d\x6a\x6b\x4b\x5e\x5a\x6a\xda\xbd\x18\x8c\x44\xc7\x44\x65\x51\x25\xa9\x04\xd9\x5f\xbf\x20\x29\xca\x92\x5d\x27\x6e\xe1\xdd\x05\x36\xa7\xc8\x9c\xd1\xbc\x79\x33\xf3\x38\x7a\xfd\xca\x83\x57\x10\x96\x4c\x31\x52\x40\x4e\x14\xb9\x23\x92\x82\xcc\xd6\x74\x43\x60\xc5\x05\xa8\x35\x05\x54\x31\xa9\x78\x41\xc4\x13\xf8\xf3\x10\x24\x15\x0f\x54\x0c\x3d\x78\xf5\xda\x7b\x8f\x6e\xc2\x68\xe4\x79\xf6\x45\xa8\xac\x37\x54\x10\xc5\x78\x29\x81\x94\x39\x64\xb5\x54\x7c\x63\x5e\x0c\xea\xa9\xa2\xd2\x7a\x79\x01\x46\x7e\x82\x20\xf9\x32\x47\x20\x28\xc9\x59\x79\xbf\x94\x8a\xa8\x5a\x82\xbf\x00\x14\xa5\x33\xb8\xf0\x00\x00\xce\xbf\xd5\xb4\xa6\xf9\xf9\xa5\x7d\x92\x8a\x08\xb5\x7d\x5c\xb1\x92\xc9\xf5\xf6\x99\x88\x6c\xcd\x1e\x68\x7e\xee\x0d\x5a\x4c\x09\xb9\x2b\x28\xe4\x54\xdb\x5a\x60\xac\xcc\x8a\x5a\x87\x84\x39\x0e\x67\x3e\xfe\x02\x1f\xd1\x17\x03\x37\x8d\xc2\xdf\x53\x04\xac\xcc\x59\x46\xa5\x85\x7a\x75\x65\xf3\x2f\xa8\x04\x26\x0d\x1f\x19\x2f\x0a\x9a\xe9\x97\x01\x5f\x41\x41\x95\xa2\x42\x9f\x10\x05\x8f\xf4\x5c\x50\x90\xe4\x41\xbf\x5e\xf3\xb7\xaa\x85\x5a\x53\xe1\xb2\x6c\x33\xf7\xdf\x4f\x11\x84\x13\x88\xe2\x04\xd0\xe7\x70\x91\x2c\x80\xba\x30\x36\x75\x96\x43\xfb\xb7\x40\x38\xf4\xa7\x5d\xbc\x36\xe3\x82\x95\x5f\x9d\xcd\x27\x1f\x07\x1f\x7c\x7c\xf1\xe6\xfa\xfa\x7a\xe0\x52\xd1\xaf\x8f\xd2\xe9\xd4\x9a\x2b\xa6\x0a\xba\x63\xfe\xf6\x7f\x6f\x06\xf6\x34\xa7\x32\x13\xac\x32\x79\xb9\xd3\xff\x5f\xff\xfa\x4b\x73\xbc\x22\x0f\x2c\xe3\xe5\x7e\x2c\x7b\x9c\x09\x4a\x14\xb5\x98\x93\x70\x86\x16\x89\x3f\x9b\x27\x7f\xb4\x08\x60\x8c\x26\x7e\x3a\x4d\x20\x8a\x6f\x2f\x1a\x9f\x0d\xcf\xd9\x8a\x59\xa7\x97\x7d\x4c\x51\xaf\xae\x60\x46\x2a\x5b\x87\x96\x30\xc5\xcd\x73\x2d\xa9\xb0\x65\x70\x60\xd4\x9a\x6e\x4c\x65\x59\xb9\xe2\x62\x63\x3a\x13\xc8\x1d\xaf\xd5\x31\x05\x69\x4c\x9a\x7a\x34\xd1\x96\xb6\x2e\x61\x94\xa0\x1b\x84\x6d\x1e\x3a\xf0\xb2\xad\x57\xef\xa8\xe9\xea\xe6\x6f\xa7\xd7\x5d\x7a\xfd\x2e\x6f\x9a\xbc\x71\xe9\xf0\xd2\xd4\xa1\x69\xfa\x03\xc7\x6e\x06\x0e\x1c\x77\xcb\xf4\x73\x85\x3a\xde\xab\x3b\x5e\x17\x5b\xfa\x2e\x1d\x5f\x6d\x45\xe7\x82\x6d\xb4\xba\x90\x5a\xad\x69\xa9\x58\x66\x0b\xa5\xcc\xe8\x9a\x82\xae\x79\x91\x4b\xe3\x57\x92\x0d\xb5\xe2\xb2\x26\x86\x86\x8a\x48\xf9\xc8\x45\x2e\x9f\x2b\xa5\xf6\xfc\x91\xc1\xa2\x1b\xc2\x8a\xdd\xc1\x7a\xfb\xf6\xc0\x5c\x39\x5c\xc7\x59\x3b\xc0\x7b\xd6\x7d\x33\xc1\xdb\x66\x73\x2d\xb5\x63\x51\x10\xa9\x96\x92\xd2\xf2\xa5\x42\xff\xbd\xf3\x88\xb9\x9e\x41\x22\xba\xc2\x28\xb5\x32\x56\x54\x6c\x98\x94\xe6\xd1\x8e\x25\x29\xe1\x8e\xc2\xb7\x9a\x65\x5f\x8b\x27\x20\x52\xb2\xfb\x52\x8f\x29\x07\x62\x48\x7c\x76\x1a\xf9\x8f\x69\xe3\xf7\xc4\xee\x70\x51\xbe\x27\x7e\x5b\x69\xfc\xe7\xc8\x9c\x77\x38\xbb\xe0\x02\x64\xc6\x2b\x2a\x07\x66\x34\xb8\x60\x7f\xd2\x8e\xd2\x71\xcd\xb0\xd6\x35\x20\x8e\xf4\xd2\x1c\xfb\xf3\xf0\x39\x26\xbb\x75\xf9\xaf\xf3\xd9\x5e\x16\x39\x5d\x91\xba\x50\xfd\xa6\xd4\x7d\xa7\xfb\xea\xa5\xbe\x5b\xee\x53\xd6\x1d\xcf\x1d\xcd\xdf\x1a\x6b\x83\xde\xd1\xbf\x26\xbf\x0d\xdc\xcb\x3e\xb8\x41\x67\x51\x9a\x70\x41\xd9\x7d\x09\x1f\xe9\x13\x60\x5a\xd8\x2d\x6e\xcd\xaa\x66\x0f\xf2\xa7\x09\xc2\x0d\x41\xee\x62\xf4\xc7\x63\x08\xe2\x68\x91\x60\x3f\x8c\x12\x58\x7d\x5d\xba\x0b\xae\x51\x7b\x83\x63\x12\x63\x14\xde\x44\xbb\xd7\xc0\x00\x30\x9a\x20\x8c\xa2\x00\x75\x77\x1f\x0d\x4a\x7b\xc5\x11\x8c\xd1\x14\x25\x08\x02\x7f\x11\xf8\x63\x34\xfa\x51\x0c\x46\x50\xf6\x00\xb8\xbb\xa7\x1b\xbd\xb9\x1d\x8e\x0d\x6d\xcd\xf7\x03\x9b\xdf\x97\xa6\x9f\xf6\xc2\x36\xfc\xf7\xc2\x36\x8a\xb6\x1f\x16\xa3\x45\x82\xc3\x20\xd9\x4d\x79\xb7\x13\xbf\x93\xfb\x8e\xc9\x29\xd0\x1c\xe0\xff\x27\xc0\x6c\xff\xdf\x87\xd4\xef\xcb\x2e\xb0\xde\xec\x3d\x07\xcf\xf6\xf1\x27\x46\x1f\xb7\xbb\xbb\x5f\x14\xfc\xb1\x59\x17\x89\x7c\x02\x49\x3b\xab\x3b\x29\x8a\xde\xdb\xf5\xc2\x6e\x2f\x22\xd0\xdf\x41\x79\xa3\xa7\x4c\xf4\x44\x22\xc6\x80\xd1\x7c\xea\x07\x08\x3e\x85\xe8\xd6\x6e\x33\x3d\x26\x16\x9e\x15\xd2\x29\x0a\x12\xa8\x87\x2c\x07\x22\xdd\xd2\x73\x09\xd5\xd0\x4a\x29\x91\xb0\x43\x88\x21\x05\xc7\xb3\xa6\xc3\xea\xf6\xc7\xdf\xe2\x30\xda\x67\x5c\x54\x9a\x06\x51\x0d\x9d\x16\xbd\x83\xda\xfd\xdf\x77\xed\x7a\x19\xa7\x6a\x68\xcc\x45\x35\xec\xf1\xee\xb5\x2c\xfa\xb5\xe2\x7a\x5f\xce\x48\x51\x3c\x41\x5d\xe5\x44\xd1\xad\x0e\x29\xb6\xa1\x52\x91\x8d\x13\x87\x7d\x66\x26\x69\x14\x24\x61\x1c\x81\x12\xec\xfe\x9e\x8a\xa5\xa4\x6a\xe9\xfc\x97\xad\xff\xc5\xc0\xc3\x28\x49\x71\xb4\x80\x04\x87\x37\x7a\xc7\xf1\x17\x70\x76\x66\x3f\x2c\x4d\x12\x11\xba\x1d\xb6\x81\xdf\x59\x81\x1b\x99\x13\xeb\xa9\x0d\x46\x1e\x8a\xc6\x23\xef\xec\x0c\xa6\x7e\x74\x93\xfa\x37\x08\xaa\xa2\xba\x97\xdf\x8a\x51\xff\x0b\x6e\x3f\x83\x56\xfa\x9b\xf0\x1a\xa7\x53\xa3\x16\xb0\xf7\x1e\xe9\x66\x85\x74\x3e\x36\x79\x46\xad\x60\x79\x93\x18\x03\xf2\x83\x0f\x80\xe3\x5b\x0f\x7d\x46\x41\x9a\x20\x98\xe3\x38\x40\xe3\x14\xa3\x17\xd3\xdf\xc1\x97\xea\xde\x3b\x0e\xa4\x93\xb9\xc3\x18\xdd\x27\xce\x49\x20\xa6\xa6\x25\x8f\x83\x66\x85\xf0\x30\x30\x73\x7e\x1a\x58\x76\xf9\x3c\x92\x31\xfe\x7c\x4d\xcd\xf9\x69\x60\x75\xd7\xb8\xe3\xc0\x75\x75\xf2\x30\xc4\x8e\xd5\xe9\xf8\xfb\x09\xb4\x7b\xd2\xfe\x3c\xab\xcb\xd3\xe2\x0e\xe2\xd9\x2c\x4c\x46\x7f\x05\x00\x00\xff\xff\x6b\xd7\x7e\x44\xbe\x12\x00\x00")

func _000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaUpSql,
		"000001_initial_schema.up.sql",
	)
}

func _000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.up.sql", size: 4798, mode: os.FileMode(0644), modTime: time.Unix(1667829380, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0xf, 0xb8, 0xe2, 0x19, 0xa4, 0x29, 0xbf, 0xb4, 0xb9, 0xef, 0xc0, 0xa1, 0x7a, 0x58, 0xfb, 0x27, 0x3b, 0xeb, 0xa7, 0xbb, 0x34, 0x40, 0x61, 0x66, 0x81, 0xac, 0x41, 0xb1, 0x9e, 0x95, 0x3e}}
	return a, nil
}

var __000002_default_rolesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x0a\x09\x0a\xf5\x73\x76\x0c\x71\x55\x28\xca\xcf\x49\x8d\x2f\x48\x2d\xca\xcd\x2c\x2e\xce\xcc\xcf\x2b\xb6\x46\x48\x61\x17\x05\x69\x28\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xe6\xc8\xff\xd6\x51\x00\x00\x00")

func _000002_default_rolesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesDownSql,
		"000002_default_roles.down.sql",
	)
}

func _000002_default_rolesDownSql() (*asset, error) {
	bytes, err := _000002_default_rolesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.down.sql", size: 81, mode: os.FileMode(0644), modTime: time.Unix(1667765529, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x9e, 0x68, 0x92, 0x2b, 0x78, 0xc1, 0x30, 0x1e, 0x3d, 0xaa, 0x89, 0xe7, 0xd8, 0xa, 0x38, 0x82, 0xd2, 0x53, 0x24, 0x72, 0x9d, 0xca, 0x68, 0x14, 0xfa, 0x4, 0x6f, 0x87, 0x83, 0x6b, 0xa7}}
	return a, nil
}

var __000002_default_rolesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6f\xa3\x30\x10\x86\xef\xfc\x8a\xf7\x46\x23\xb9\x87\x7c\x9c\xda\x53\x37\x8a\x56\x91\x36\x61\xb5\xc9\xee\xb5\x72\xf0\x6c\x18\x09\x6c\x64\xbb\x45\xf9\xf7\x2b\x43\x00\x43\xb7\x52\x6f\xe3\x89\xfd\xcc\x3b\x4f\x78\x7c\xc4\x4f\x53\xbf\x95\xd2\x13\x7c\x41\x50\xd2\xcb\x8b\x74\x84\x86\x7d\x01\xd6\xec\x59\x96\xb0\xa6\x24\x07\xa9\x15\x6a\xb2\x15\x3b\xc7\x46\xbb\xf6\x6e\xf2\x6d\xf7\x7d\x7f\x7c\x4e\x92\xfd\xf1\xb4\xfb\x75\xc6\xfe\x78\xce\xee\xd7\x1f\x58\x09\x78\xf6\x25\x09\x28\x72\xb9\xe5\xda\xb3\xd1\x0b\xfc\x79\xf9\xf1\x7b\x77\x4a\x00\xe0\x61\x29\x90\xbe\xa8\x8a\x75\x2a\x90\x6e\xa5\x46\x6e\x29\x64\x09\xb3\x2a\xa9\xe5\x35\x94\x37\x50\xcd\xce\x07\x28\xeb\x49\xcc\x74\x21\x3a\xce\x4a\x20\x3d\x50\x75\x21\xfb\x39\xc8\x17\xc4\x16\xa6\xd1\x03\x6e\x78\xbe\x16\x48\xb3\x8b\x23\xfb\xde\x01\x32\x5d\xde\x50\x48\x07\x4b\x52\xc1\x84\x93\xcc\x73\x72\x0e\xde\x8c\x61\x7c\x41\xb7\xfb\x1c\x95\x2e\x92\x99\x85\x58\xd5\x97\x5d\xc8\xe0\xe2\x29\xaf\x5c\xbf\x46\x3f\xb6\x20\x6c\x0f\x27\x38\xfe\xb0\xd3\x98\xe7\xbf\x56\xfa\x5f\x9f\xc2\x2a\x3d\xf5\x9d\xa9\x99\xbe\xfd\x6b\x6c\xdb\x28\xcd\xf5\x4a\x2a\x78\x7e\x73\x64\x27\x82\x06\x52\xb7\xf2\x4c\xb4\xa6\xe6\xcb\xb4\x4d\x4c\x53\x54\xd2\x48\xeb\x4e\x90\xc3\x9f\x74\x67\x81\xe6\xac\xb9\xef\xf0\xd5\xbd\x4e\xa4\xb7\x9d\x60\x7e\xec\xbe\xb2\xfa\x20\x7d\xd9\xc7\x5a\x0a\xac\xa2\x7a\x1d\xd5\x9b\x48\xe9\x2a\xaa\xd7\x51\xbd\x89\x64\xad\xda\x78\xdb\xec\x70\xd8\x9f\x9f\xff\x05\x00\x00\xff\xff\x4f\x25\xca\x68\x65\x03\x00\x00")

func _000002_default_rolesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesUpSql,
		"000002_default_roles.up.sql",
	)
}

func _000002_default_rolesUpSql() (*asset, error) {
	bytes, err := _000002_default_rolesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.up.sql", size: 869, mode: os.FileMode(0644), modTime: time.Unix(1667765787, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xc4, 0x4, 0xeb, 0xf9, 0xa8, 0x40, 0xad, 0xae, 0xad, 0x42, 0x5, 0x53, 0x5, 0xb6, 0x84, 0xf9, 0x33, 0xa3, 0x4e, 0xef, 0xd3, 0xb, 0x11, 0xdd, 0x31, 0xcc, 0x16, 0xa4, 0xca, 0xbc, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_schema.down.sql": _000001_initial_schemaDownSql,
	"000001_initial_schema.up.sql":   _000001_initial_schemaUpSql,
	"000002_default_roles.down.sql":  _000002_default_rolesDownSql,
	"000002_default_roles.up.sql":    _000002_default_rolesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_schema.down.sql": {_000001_initial_schemaDownSql, map[string]*bintree{}},
	"000001_initial_schema.up.sql": {_000001_initial_schemaUpSql, map[string]*bintree{}},
	"000002_default_roles.down.sql": {_000002_default_rolesDownSql, map[string]*bintree{}},
	"000002_default_roles.up.sql": {_000002_default_rolesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
