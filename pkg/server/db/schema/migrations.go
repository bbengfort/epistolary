// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_initial_schema.down.sql (500B)
// 000001_initial_schema.up.sql (5.036kB)
// 000002_default_roles.down.sql (81B)
// 000002_default_roles.up.sql (875B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x5b\x6a\x32\x41\x10\x85\xdf\x67\x15\xb5\x01\x57\xe0\xd3\xaf\xff\x18\x1a\xe2\x85\x38\xb9\x3d\x0d\xed\xf4\x99\xa1\xc8\xf4\x85\xae\xea\x04\x77\x1f\xd4\x44\x14\x14\xf2\x7c\x4e\x7d\x9c\xaf\x66\xf5\x83\x59\x4d\xab\x6a\x32\x21\x97\x63\xa2\x4f\xc6\x97\x50\xcf\x59\x94\x34\x12\x82\x94\x0c\x52\xbb\x1b\x21\xd4\xd9\x40\x3b\x1c\x8b\x09\xae\xfa\xff\xb4\xde\xd0\x8b\xa9\x5f\xc9\x2c\xa8\x7e\x33\xdb\x66\x4b\x45\x90\xdb\x84\xec\x59\x84\x63\x90\x0b\xf4\x0f\x84\x03\xc5\xec\x90\x29\xf6\xd4\xc7\x0c\x1e\x02\x7d\x60\x4f\x0e\x09\xc1\x21\x74\x0c\x39\xa1\x9b\x7f\xb3\xc7\xfa\x82\x9d\xe3\x88\x6b\xf6\xed\x1a\xac\xe3\x30\xdc\x49\xff\x70\x1f\x47\xdc\xcb\x0e\x7a\xf7\x32\x24\x16\x3d\x9e\x9e\x95\x11\x8a\x17\xb2\xc1\x51\x57\x44\xa3\x27\xdd\xa7\xb3\xdd\xfb\xe6\xc6\xea\x56\xd4\x6a\xb9\x7a\x5b\xe6\x61\x40\x3e\x61\xfa\x12\x3a\x3d\x6c\xa7\xd1\x8a\x9e\x40\x8b\xe7\xd5\xbc\x31\xeb\xd5\x6f\xb3\x15\x68\xeb\xa3\xe3\x9e\xe1\x5a\x65\x0f\x51\xeb\xd3\xb4\xaa\xe6\xeb\xe5\xd2\x34\xd3\xef\x00\x00\x00\xff\xff\x4d\xcf\x46\x36\xf4\x01\x00\x00")

func _000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaDownSql,
		"000001_initial_schema.down.sql",
	)
}

func _000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.down.sql", size: 500, mode: os.FileMode(0644), modTime: time.Unix(1667829363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xe3, 0x10, 0x82, 0x70, 0xee, 0x2f, 0xec, 0x31, 0x14, 0x6c, 0x92, 0xde, 0xfc, 0x6, 0x9f, 0x8d, 0xd0, 0x50, 0x51, 0x16, 0x84, 0x38, 0x39, 0x37, 0x71, 0x6b, 0x9a, 0xe3, 0x0, 0x5a, 0x43}}
	return a, nil
}

var __000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4f\x6f\xdb\xb8\x13\xbd\xeb\x53\xcc\x21\x40\xe2\x22\x71\xf3\x2b\x7e\x5d\x60\x61\xf4\xa0\xca\x74\xaa\xad\x2d\x7b\x69\xa9\x69\xf7\x62\x30\x12\x6d\x13\xa5\x45\x95\xa4\x12\x64\x3f\xfd\x82\xa4\x24\x4b\xfe\x93\xb8\x41\x76\xf7\xb0\x3e\x59\xd2\x0c\xe7\xcd\x9b\x99\x47\xf2\xed\x1b\x0f\xde\x40\x98\x33\xcd\x08\x87\x8c\x68\x72\x47\x14\x05\x95\xae\xe9\x86\xc0\x52\x48\xd0\x6b\x0a\xa8\x60\x4a\x0b\x4e\xe4\x23\xf8\xb3\x10\x14\x95\xf7\x54\xf6\x3d\x78\xf3\xd6\xfb\x88\x6e\xc2\x68\xe0\x79\x6e\x21\x94\x97\x1b\x2a\x89\x66\x22\x57\x40\xf2\x0c\xd2\x52\x69\xb1\xb1\x0b\x83\x7e\x2c\xa8\x72\x5e\x5e\x80\x91\x1f\x23\x88\xbf\xcd\x10\x48\x4a\x32\x96\xaf\x16\x4a\x13\x5d\x2a\xf0\xe7\x80\xa2\x64\x02\x17\x1e\x00\xc0\xf9\x8f\x92\x96\x34\x3b\xbf\x74\x4f\x4a\x13\xa9\xb7\x8f\x4b\x96\x33\xb5\xde\x3e\x13\x99\xae\xd9\x3d\xcd\xce\xbd\x5e\x83\x29\x26\x77\x9c\x42\x46\x8d\xad\x03\xc6\xf2\x94\x97\x26\x24\xcc\x70\x38\xf1\xf1\x37\xf8\x8c\xbe\x59\xb8\x49\x14\xfe\x9e\x20\x60\x79\xc6\x52\xaa\x1c\xd4\xab\x2b\x97\x3f\xa7\x0a\x98\xb2\x7c\xa4\x82\x73\x9a\x9a\xc5\x40\x2c\x81\x53\xad\xa9\x34\x5f\x88\x86\x07\x7a\x2e\x29\x28\x72\x6f\x96\x37\xfc\x2d\x4b\xa9\xd7\x54\xd6\x59\x36\x99\xfb\x1f\xc7\x08\xc2\x11\x44\xd3\x18\xd0\xd7\x70\x1e\xcf\x81\xd6\x61\x5c\xea\x2c\x83\xe6\x37\x47\x38\xf4\xc7\x6d\xbc\x2e\x63\xce\xf2\xef\xb5\xcd\x17\x1f\x07\x9f\x7c\x7c\xf1\xee\xfa\xfa\xba\x57\xa7\x62\x96\x8f\x92\xf1\xd8\x99\x6b\xa6\x39\xdd\x31\x7f\xff\xbf\x77\x3d\x18\xa2\x91\x9f\x8c\xdb\xa6\x19\x55\xa9\x64\x85\x4d\xb2\x36\xfd\xff\xf5\xaf\xbf\x1c\xb2\x5d\x92\x7b\x96\x8a\xfc\x00\x8a\x7d\xdb\x54\x52\xa2\xa9\x4b\x2d\x0e\x27\x68\x1e\xfb\x93\x59\xfc\x47\x03\x74\xeb\x32\xbd\xbd\xe8\x39\x9f\x8d\xc8\xd8\x92\x39\xa7\xe7\x7d\x6c\xed\xaf\xae\x60\x42\x0a\x57\xae\x86\x57\x2d\xec\x73\xa9\xa8\x74\xd5\xaa\xc1\xe8\x35\xdd\xd8\x06\x60\xf9\x52\xc8\x8d\x6d\x60\x20\x77\xa2\xd4\xa7\xd4\xad\x32\xa9\xca\x56\x45\x5b\xb8\xf2\x85\x51\x8c\x6e\x10\xde\xa9\x83\x41\xb0\x68\xea\x7b\xd8\xa6\x1a\x87\xea\xb7\x33\x24\x75\xc2\xdd\xf1\xa8\xa6\xa3\x72\x69\x33\x75\xa0\x66\xd5\xe8\x9c\x62\x5b\x8f\xd5\x29\xb6\xed\xfa\xbe\xac\xc2\xa7\x7b\xb5\xc7\xf7\x62\xcb\xfb\x65\xcd\x6f\xd3\x0a\x33\xc9\x36\x46\xbd\x48\xa9\xd7\x34\xd7\x2c\x75\x15\xd6\x56\x1a\x6c\x27\xac\x05\xcf\x94\xf5\xcb\xc9\x86\x3a\xf1\x5a\x13\x4b\x50\x41\x94\x7a\x10\x32\x53\x4f\xf5\x80\xf1\xfc\x99\xc1\x5d\x96\x9c\x2f\x4c\xa8\xf6\xc8\xbc\x7f\x7f\x68\x62\xe8\x86\x30\xbe\x3b\xe3\xc6\xf4\xe0\x88\xd7\x29\x9c\x66\x5d\xe7\xb6\x67\xdd\x35\x93\xa2\x69\xe8\x23\xdd\xca\x89\xd2\x0b\x45\x69\xfe\x6c\x83\x14\x0f\xe9\x9a\xe4\x2b\x5b\xeb\xd3\x5b\xe9\xef\x95\x0a\x2c\x8c\x3c\x10\xd9\x96\x76\x65\xb4\xbd\xa0\x72\xc3\x94\xb2\x8f\x4e\x31\x48\x0e\x77\x14\x7e\x94\x2c\xfd\xce\x1f\x81\x28\xc5\x56\xb9\x51\x10\x01\xc4\x72\xff\xa4\x50\x88\x9f\x53\xf7\x43\x72\x7d\xbc\x96\x87\x14\xfb\x88\xb8\xff\x73\xcc\xce\x5a\x04\x5e\x08\x09\x2a\x15\x05\x55\x3d\x3b\x89\x42\xb2\x3f\x69\x4b\x91\x85\xa1\xdb\xe8\x2f\x90\xba\x02\xb9\xfd\xec\xcf\xc2\xa7\x68\x6d\x17\xe9\x3f\x45\x6e\xb3\xc3\x65\x74\x49\x4a\xae\xbb\xed\x6a\x3a\xd2\x74\xdc\x73\x1d\xb9\xd8\xe7\xaf\x3d\xef\xc7\x26\x7e\xeb\x65\x2c\x0f\xdb\xfc\x6b\x9b\x41\x95\xc0\x65\x17\x65\xaf\x75\x2c\x1c\x09\x49\xd9\x2a\x87\xcf\xf4\x11\x30\xe5\xee\xcc\xba\x66\x45\x75\xea\xf3\xc7\x31\xc2\x15\x65\xf5\xfe\xee\x0f\x87\x10\x4c\xa3\x79\x8c\xfd\x30\x8a\x61\xf9\x7d\x51\xef\xca\xd5\xde\x63\x71\x8c\xa6\x18\x85\x37\xd1\xee\xa6\xd4\x03\x8c\x46\x08\xa3\x28\x40\xed\x93\x9e\x01\x65\xbc\xa6\x11\x0c\xd1\x18\xc5\x08\x02\x7f\x1e\xf8\x43\x34\xf8\x59\x0c\x56\x7c\xf6\x00\xd4\x3b\x61\x3b\x7a\xb5\x57\x9d\x1a\xda\x99\xef\x07\xb6\xef\x17\xb6\xc3\xf6\xc2\x56\xfc\x77\xc2\x56\xea\xb7\x1f\x16\xa3\x79\x8c\xc3\x20\xde\x4d\x79\xb7\x37\x0f\xe4\xbe\x63\xf2\x1a\x68\x8e\xf0\xff\x02\x30\xdb\xff\xfb\x90\xba\x7d\xd9\x06\xd6\x99\xc6\xa7\xe0\xb9\x3e\xfe\xc2\xe8\xc3\xf6\xa6\xe2\x73\x2e\x1e\xaa\x53\x2f\x51\x8f\xa0\x68\xeb\xa2\x42\x38\xef\xac\x6e\xae\x27\x6e\xd3\x02\x73\xeb\xcb\x2a\xb9\x65\xb2\x23\x1b\x53\x0c\x18\xcd\xc6\x7e\x80\xe0\x4b\x88\x6e\xdd\xd9\xaa\xc3\xc4\xdc\x73\x3a\x3b\x46\x41\x0c\x65\x9f\x65\x40\x54\x7d\x04\xbb\x84\xa2\xef\x94\x96\x28\xd8\x21\xc4\x92\x82\xa7\x93\xaa\xc3\xca\xe6\xe5\x6f\xd3\x30\xda\x67\x5c\x16\x86\x06\x59\xf4\x6b\x75\xfa\x00\x65\xfd\xbf\xeb\xda\xf6\xb2\x4e\x45\xdf\x9a\xcb\xa2\xdf\xe1\xdd\x6b\x58\xf4\x4b\x2d\xcc\xb1\x3f\x25\x9c\x3f\x42\x59\x64\x44\xd3\xad\x0e\x69\xb6\xa1\x4a\x93\x4d\x2d\x0e\xfb\xcc\x8c\x92\x28\x88\xc3\x69\x04\x5a\xb2\xd5\x8a\xca\x85\xa2\x7a\x51\xfb\x2f\x1a\xff\x8b\x9e\x87\x51\x9c\xe0\x68\x0e\x31\x0e\x6f\x8c\x60\xfa\x73\x38\x3b\x73\xd7\x68\x9b\x44\x84\x6e\xfb\x4d\xe0\x0f\x4e\xe0\x06\xf6\x8b\xf3\x34\x06\x03\x0f\x45\xc3\x81\x77\x76\x06\x63\x3f\xba\x49\xfc\x1b\x04\x05\x2f\x56\xea\x07\x1f\x74\xef\xab\xfb\x19\x34\x9b\x41\x15\xde\xe0\xac\xd5\xa8\x01\xec\x7d\x44\xa6\x59\x21\x99\x0d\x6d\x9e\x51\x23\x58\xde\x68\x8a\x01\xf9\xc1\x27\xc0\xd3\x5b\x0f\x7d\x45\x41\x12\x23\x98\xe1\x69\x80\x86\x09\x46\xcf\xa6\xbf\x83\x2f\x31\xbd\x77\x1a\xc8\x5a\xe6\x8e\x63\xac\x6f\x6a\xaf\x02\x31\xb1\x2d\x79\x1a\x34\x27\x84\xc7\x81\xd9\xef\xaf\x03\xcb\x1d\x54\x4f\x64\x4c\x3c\x5d\x53\xfb\xfd\x75\x60\xb5\x4f\x79\xa7\x81\x6b\xeb\xe4\x71\x88\x2d\xab\xd7\xe3\xef\x05\x68\xf7\xa4\xfd\x69\x56\x17\xaf\x8b\x3b\x98\x4e\x26\x61\x3c\xf8\x2b\x00\x00\xff\xff\xac\x0e\xd8\x3f\xac\x13\x00\x00")

func _000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaUpSql,
		"000001_initial_schema.up.sql",
	)
}

func _000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.up.sql", size: 5036, mode: os.FileMode(0644), modTime: time.Unix(1668368229, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x46, 0x99, 0x11, 0x9, 0x5d, 0x7e, 0xe7, 0x84, 0xa8, 0x80, 0x63, 0xe4, 0x5b, 0x94, 0xd8, 0xe8, 0xa0, 0xf1, 0x16, 0xdb, 0xb5, 0x40, 0xb0, 0x94, 0xac, 0xca, 0xf5, 0x2f, 0x20, 0x40, 0xc7}}
	return a, nil
}

var __000002_default_rolesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x0a\x09\x0a\xf5\x73\x76\x0c\x71\x55\x28\xca\xcf\x49\x8d\x2f\x48\x2d\xca\xcd\x2c\x2e\xce\xcc\xcf\x2b\xb6\x46\x48\x61\x17\x05\x69\x28\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xe6\xc8\xff\xd6\x51\x00\x00\x00")

func _000002_default_rolesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesDownSql,
		"000002_default_roles.down.sql",
	)
}

func _000002_default_rolesDownSql() (*asset, error) {
	bytes, err := _000002_default_rolesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.down.sql", size: 81, mode: os.FileMode(0644), modTime: time.Unix(1667765529, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x9e, 0x68, 0x92, 0x2b, 0x78, 0xc1, 0x30, 0x1e, 0x3d, 0xaa, 0x89, 0xe7, 0xd8, 0xa, 0x38, 0x82, 0xd2, 0x53, 0x24, 0x72, 0x9d, 0xca, 0x68, 0x14, 0xfa, 0x4, 0x6f, 0x87, 0x83, 0x6b, 0xa7}}
	return a, nil
}

var __000002_default_rolesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6f\xe2\x30\x10\x86\xef\xf9\x15\xef\x2d\x45\x72\x0f\x7c\x9c\xda\x53\x17\xa1\x15\xd2\x86\xac\x16\x76\xaf\x95\x89\xa7\x64\xa4\xc4\x8e\x6c\x53\x94\x7f\xbf\x72\x68\x12\x87\xb6\x12\xb7\xf1\x60\x3f\xf3\xce\x43\x1e\x1f\xf1\xdb\x34\xe7\x4a\x7a\x82\x2f\x09\x4a\x7a\x79\x94\x8e\x70\x61\x5f\x82\x35\x7b\x96\x15\xac\xa9\xc8\x41\x6a\x85\x86\x6c\xcd\xce\xb1\xd1\xae\xbb\x9b\xfc\xd8\xfc\xdc\xee\x9e\x93\x64\xbb\xdb\x6f\xfe\x1c\xb0\xdd\x1d\xf2\x8f\xeb\x0f\xac\x04\x3c\xfb\x8a\x04\x14\xb9\xc2\x72\xe3\xd9\xe8\x19\xfe\xbd\xfc\xfa\xbb\xd9\x27\x00\xf0\x30\x17\x48\x5f\x54\xcd\x3a\x15\x48\xd7\x52\xa3\xb0\x14\xb2\x84\x59\xb5\xd4\xf2\x14\xca\x16\xd4\xb0\xf3\x01\xca\x7a\x12\x33\x9d\x89\x2b\x67\x21\x90\x66\x54\x1f\xc9\x7e\x0f\xf2\x25\xb1\x85\xb9\xe8\x01\x37\x3c\x5f\x0a\xa4\xf9\xd1\x91\x7d\xbf\x02\x72\x5d\xb5\x28\xa5\x83\x25\xa9\x60\xc2\x49\x16\x05\x39\x07\x6f\xc6\x30\xbe\xa4\xf6\x63\x8e\x4a\x67\xc9\x8d\x85\x58\xd5\xdd\x2e\x64\x70\xf1\x54\xd4\xae\x5f\xa3\x1f\x5b\x12\xd6\xd9\x1e\x8e\x3f\xed\x34\xe6\xf9\xd2\x4a\xff\xeb\x53\x58\xa5\xa7\xbe\x33\x5d\xa6\x6f\xdf\x8c\xed\x1a\x95\x39\x9d\x48\x05\xcf\x67\x47\x76\x22\x68\x20\x9d\x1b\x25\x3d\xdd\x88\x36\x16\xb5\x51\xfc\xd6\xde\xcd\x5c\xc5\x4c\x45\x15\x8d\xcc\xeb\x09\x72\xf8\xab\xbe\x65\xdd\x5a\x0f\xdf\xde\xeb\x44\x7d\xd7\x09\xfe\xc7\xee\x2b\xab\x4f\xea\xe7\x7d\xac\xb9\xc0\x22\xaa\x97\x51\xbd\x8a\xc4\x2e\xa2\x7a\x19\xd5\xab\x48\xd9\xa2\x8b\xb7\xce\xb3\x6c\x7b\x78\xfe\x1f\x00\x00\xff\xff\x41\xe7\xf8\x8c\x6b\x03\x00\x00")

func _000002_default_rolesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesUpSql,
		"000002_default_roles.up.sql",
	)
}

func _000002_default_rolesUpSql() (*asset, error) {
	bytes, err := _000002_default_rolesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.up.sql", size: 875, mode: os.FileMode(0644), modTime: time.Unix(1668374036, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x6b, 0x51, 0x2b, 0xd9, 0xb5, 0x6d, 0xc1, 0xb0, 0x6a, 0x25, 0xa, 0x9f, 0xc0, 0x91, 0xf, 0x6d, 0x33, 0x73, 0xb0, 0x74, 0xae, 0x86, 0x1d, 0x64, 0x15, 0x72, 0x29, 0xf3, 0x5b, 0xf, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_schema.down.sql": _000001_initial_schemaDownSql,
	"000001_initial_schema.up.sql":   _000001_initial_schemaUpSql,
	"000002_default_roles.down.sql":  _000002_default_rolesDownSql,
	"000002_default_roles.up.sql":    _000002_default_rolesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_schema.down.sql": {_000001_initial_schemaDownSql, map[string]*bintree{}},
	"000001_initial_schema.up.sql": {_000001_initial_schemaUpSql, map[string]*bintree{}},
	"000002_default_roles.down.sql": {_000002_default_rolesDownSql, map[string]*bintree{}},
	"000002_default_roles.up.sql": {_000002_default_rolesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
