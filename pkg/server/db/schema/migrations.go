// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_initial_schema.down.sql (438B)
// 000001_initial_schema.up.sql (4.518kB)
// 000002_default_roles.down.sql (81B)
// 000002_default_roles.up.sql (869B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\x4d\x4e\xc3\x30\x10\xc5\xf1\x7d\x4e\x31\x17\xe8\x09\xb2\xa2\x25\x45\x96\x68\x82\x68\xf8\xd8\x45\x6e\xfc\x1c\x8d\x48\x6c\x6b\xc6\x01\x71\x7b\x14\x0a\x52\x90\xa8\xba\xf6\x5f\xbf\xe7\xd9\x56\x77\xa6\x2e\x8b\x62\xb3\x21\x27\x31\xd1\x3b\xe3\x43\xc9\xb3\x68\xa6\x1c\x09\x41\x67\x01\x65\x7b\x1a\xa1\xd4\xdb\x40\x27\x7c\x87\x09\xae\xb8\x7d\x6c\x1e\xe8\xd9\x54\x2f\x64\xf6\x54\xbd\x9a\x63\x7b\xa4\x59\x21\x5d\x82\x4c\xac\xca\x31\xe8\x8a\xfe\x41\x38\x50\x14\x07\xa1\xe8\xc9\x47\x01\x0f\x81\xde\xf0\x49\x0e\x09\xc1\x21\xf4\x0c\x3d\xd3\xed\xcd\xf6\xbe\x5a\xd9\x12\x47\xfc\xb5\xff\xcd\x90\x58\xf3\x08\xed\x96\xbf\x5c\x68\xae\x2b\xcb\xd8\xa5\xb7\x05\xbe\xb6\xbe\x3e\x5c\x78\x18\x20\x4a\x36\x38\xf2\x73\xe8\xf3\xb2\x4b\xa3\xd5\x7c\x36\xf6\x4f\xf5\xae\x35\x4d\xfd\x5b\x76\x8a\xdc\x4d\xd1\xb1\x67\xb8\x2e\xf3\x04\xcd\x76\x4a\x65\x51\xec\x9a\xc3\xc1\xb4\xe5\x57\x00\x00\x00\xff\xff\x8f\x26\x62\xec\xb6\x01\x00\x00")

func _000001_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaDownSql,
		"000001_initial_schema.down.sql",
	)
}

func _000001_initial_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.down.sql", size: 438, mode: os.FileMode(0644), modTime: time.Unix(1667765961, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x7c, 0xe2, 0xfe, 0xe9, 0x2c, 0xd0, 0x53, 0x53, 0xb5, 0x74, 0x72, 0x1e, 0x94, 0x93, 0x1d, 0xcc, 0xcd, 0x53, 0xf, 0xf3, 0x4d, 0xe1, 0x2b, 0xe7, 0x2a, 0xc7, 0x89, 0x76, 0x1f, 0xa5, 0x17}}
	return a, nil
}

var __000001_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xd1\x6f\xe2\xb8\x13\x7e\xcf\x5f\x31\x0f\x95\x7e\x50\x75\xd9\xfe\x56\xd7\x93\x4e\x68\x1f\xd2\x60\xd8\xdc\x42\xc2\x99\xa4\xdd\xbd\x17\xe4\x12\x03\x56\x4d\x92\xb5\x4d\xab\xde\x5f\x7f\xb2\x9d\x84\x84\xb4\x94\xf6\xd0\xea\x74\x3c\x91\xcc\x8c\xe7\xf3\x37\xe3\xcf\x93\x8f\xe7\x0e\x9c\x83\x9f\x32\xc5\x08\x87\x84\x28\x72\x47\x24\x05\xb9\x58\xd3\x0d\x81\x65\x26\x40\xad\x29\xa0\x9c\x49\x95\x71\x22\x9e\xc0\x9d\xfa\x20\xa9\x78\xa0\xa2\xe7\xc0\xf9\x47\xe7\x1a\x8d\xfc\xa0\xef\x38\x76\xa1\x88\xdc\x71\x0a\x09\x5d\x32\xbd\x62\x96\x4a\x60\xe9\x82\x6f\x13\x96\xae\x60\x8a\xfd\x89\x8b\xbf\xc3\x57\xf4\x1d\x48\x9a\x40\x1c\xf8\x7f\xc4\x08\x58\x9a\xb0\x05\x95\x66\x31\xe7\xc3\x07\x9b\x8b\x53\x09\x4c\x9a\xdc\x8b\x8c\x73\xba\xd0\x8b\x41\xb6\x04\x4e\x95\xa2\x42\x5b\x88\x82\x47\xfa\x3f\x41\x41\x92\x07\xbd\xbc\xc6\xba\xdc\x0a\xb5\xa6\x02\x04\x25\x3a\xa5\xe3\x61\xe4\x46\x08\x22\xf7\x7a\x8c\xc0\x1f\x42\x10\x46\x80\xbe\xf9\xb3\x68\x06\xb4\x4c\xd3\x71\x00\x00\x58\x02\xd5\x6f\x86\xb0\xef\x8e\xeb\x78\x2f\x8c\x0f\x67\xe9\x7d\xe9\x73\xe3\x62\xef\x8b\x8b\x3b\x9f\x2e\x2f\x2f\xbb\xe5\x56\xf4\xf2\x41\x3c\x1e\x5b\x77\xc5\x14\xa7\x7b\xee\x57\xff\xff\xd4\xb5\xd6\x84\xca\x85\x60\xb9\xd9\x57\x69\xfd\xe5\xf2\xb7\x5f\x0b\xf3\x92\x3c\xb0\x45\x96\xb6\x73\x59\xf3\x42\x50\xa2\xa8\xc5\x1c\xf9\x13\x34\x8b\xdc\xc9\x34\xfa\xb3\x42\x00\x03\x34\x74\xe3\x71\x04\x41\x78\xdb\x29\x62\x36\x59\xc2\x96\xcc\x06\xbd\x1e\xe3\x74\xfb\xa6\x1c\x13\x92\xdb\x3a\x54\x84\xa9\xcc\x3c\x6f\x25\x15\xb6\x0c\x25\x18\xb5\xa6\x9b\x63\x28\x9f\x9b\x50\xcb\x7b\xf1\x6e\x6e\xf9\xf7\x83\x08\x8d\x10\xb6\x78\xb5\xd7\xbc\xaa\x4b\xc3\x54\xdf\xfe\xfb\x08\x38\x3e\xaa\xde\xb6\x9d\x1d\xdc\x8b\x12\x5f\xc5\xd4\x54\xb0\x8d\x3e\x21\x64\xab\xd6\x34\x55\x6c\x41\x4c\x71\x95\x39\x12\x86\xa8\x75\xc6\x13\x69\xe2\x52\xb2\xa1\xd2\x9c\x82\x35\x91\x6b\x9a\x40\x4e\xa4\x7c\xcc\x44\x22\x0f\x11\xa8\x23\xdf\xd2\xb0\x74\x43\x18\xdf\x6f\xd8\xab\xab\x17\xfa\xb5\xc4\x75\x9c\x77\x09\xb8\xe5\xdd\x74\x13\x59\x55\xdc\xb2\x84\x7b\x1e\x9c\x48\x35\x97\x94\xa6\xcd\x9a\xfc\xec\x3e\xc7\x99\xee\x6d\x22\xea\x82\x23\xb5\xe2\xe4\x54\x6c\x98\x94\xe6\xd1\xb6\x3b\x49\xe1\x8e\xc2\x8f\x2d\x5b\xdc\xf3\x27\x20\x52\xb2\x55\xaa\xdb\x3f\x03\x62\x48\x3c\x54\x42\x91\xbd\x4d\x73\x9e\x13\x91\x97\x8b\xf2\x9c\xa8\xec\x24\xe7\xe7\x91\x39\xad\x71\xd6\xc9\x04\xc8\x45\x96\x53\xd9\x35\x47\x23\x13\xec\x2f\x5a\x53\x90\x4c\x33\xbc\xcc\xc4\x06\x48\x49\x7a\x6a\xcc\xee\xd4\x3f\xc4\x64\xbd\x2e\xff\x75\x3e\x2b\x11\x4e\xe8\x92\x6c\xb9\x6a\x36\xa5\xee\x3b\xdd\x57\xaf\xf5\xdd\xbc\x4d\x59\xfd\x78\xee\x69\xec\xce\x59\x3b\xfc\x3b\xe4\xb7\x80\x7b\xd1\x04\x67\x69\xb2\x03\xc8\x30\x13\x94\xad\x52\xf8\x4a\x9f\x00\x53\x6e\x24\x58\xae\x59\x5e\xcc\x17\xee\x38\x42\xb8\x20\xa8\x79\x1d\xb9\x83\x01\x78\x61\x30\x8b\xb0\xeb\x07\x11\x2c\xef\xe7\x0d\x7b\xf9\x64\x30\x0d\x43\x8c\xfc\x51\xb0\x7f\x25\x74\x01\xa3\x21\xc2\x28\xf0\x50\x7d\xbe\xd0\x00\x75\x54\x18\xc0\x00\x8d\x51\x84\xc0\x73\x67\x9e\x3b\x40\xfd\x7f\x82\xc7\x08\x4d\x0b\x4c\x79\x27\xd5\x91\x14\xb7\xc6\xb1\x30\xac\x7b\x3b\xbd\x79\x3f\x37\x7d\xd6\x4a\x5b\xd4\xa5\x91\xb6\x50\xba\x76\x5a\x8c\x66\x11\xf6\xbd\x68\x2f\x6f\xab\x43\xdb\x10\xf6\x5d\x4e\x81\xe6\x79\x12\xde\x03\x66\xf7\xbf\x0d\xa9\xd9\xaf\x75\x60\x8d\x33\x79\x08\x9e\xed\xef\x1b\x46\x1f\x77\xb3\xb2\xcb\x79\xf6\x58\x8c\x67\x44\x3e\x81\xa4\xb5\x51\x99\x70\xde\x58\x5d\x0f\xc8\xf6\x82\x02\x3d\xe3\x27\x85\xce\x32\xd1\x10\x8f\x10\x03\x46\xd3\xb1\xeb\x21\xb8\xf1\xd1\xad\x9d\x72\x1a\x4c\xcc\x1c\x2b\xb0\x63\xe4\x45\xb0\xed\xb1\x04\x88\x2c\x87\xa1\x0b\xc8\x7b\x56\x62\x89\x84\x3d\x42\x0c\x29\x38\x9c\x14\x1d\xb6\xad\x5e\xfe\x1e\xfa\x41\x9b\x71\x91\x6b\x1a\x44\xde\x2b\x35\xea\x33\x6c\xcb\xff\xcd\xd0\x7a\x94\x09\xca\x7b\xc6\x5d\xe4\xbd\x06\xef\x4e\xc5\xa2\xbb\x55\xd9\x86\xe8\x11\x8d\xf3\x27\xd8\xe6\x09\x51\x74\xa7\x4f\x8a\x6d\xa8\x54\x64\x53\x8a\x46\x9b\x99\x61\x1c\x78\x91\x1f\x06\xa0\x04\x5b\xad\xa8\x98\x4b\xaa\xe6\x65\xfc\xbc\x8a\xef\x74\x1d\x8c\xa2\x18\x07\x33\x88\xb0\x3f\xd2\xb3\x8f\x3b\x83\xb3\x33\xfb\xd1\x64\x36\x11\xa0\xdb\x5e\x95\xf8\xb3\x15\xbe\xbe\xb1\xd8\x48\xed\xd0\x77\x50\x30\xe8\x3b\x67\x67\x30\x76\x83\x51\xec\x8e\x10\xe4\x3c\x5f\xc9\x1f\xbc\xdf\xfc\x62\x6a\xef\xa0\xba\x12\x8a\xf4\x1a\x67\xa5\x23\xa5\xbb\x73\x8d\x74\xb3\x42\x3c\x1d\x98\x7d\x06\x95\x14\x39\xc3\x10\x03\x72\xbd\x2f\x80\xc3\x5b\x07\x7d\x43\x5e\x1c\x21\x98\xe2\xd0\x43\x83\x18\xa3\x57\xb7\xbf\x87\x2f\xd6\xbd\xf7\x46\x90\xa6\xb1\x5e\x47\x6a\xf5\xf0\x24\x70\x63\xd3\x9e\xc7\xc1\xb4\xa2\xf8\x32\x3c\x63\x3f\x0d\x2c\x3b\xa0\x1e\x07\xcb\xa8\xdd\x01\x58\xc6\x7e\x1a\x58\xf5\x51\xef\x38\x70\x75\xcd\x7c\x19\x62\xcd\xeb\x74\xfc\xbd\x03\x6d\x4b\xe6\x0f\xb3\x3a\x3f\x2d\x6e\x2f\x9c\x4c\xfc\xa8\xff\x77\x00\x00\x00\xff\xff\xfb\xa9\xa0\xe2\xa6\x11\x00\x00")

func _000001_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_schemaUpSql,
		"000001_initial_schema.up.sql",
	)
}

func _000001_initial_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_schema.up.sql", size: 4518, mode: os.FileMode(0644), modTime: time.Unix(1667766468, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x9f, 0xbd, 0x67, 0x76, 0xa2, 0xa4, 0x10, 0xdf, 0x9c, 0x35, 0xca, 0xe8, 0x6f, 0xb8, 0xd, 0xc4, 0x6c, 0x56, 0x92, 0xfc, 0xd5, 0xd, 0x74, 0x18, 0x5f, 0x59, 0x7a, 0x6a, 0xdf, 0xce, 0xeb}}
	return a, nil
}

var __000002_default_rolesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x0a\x09\x0a\xf5\x73\x76\x0c\x71\x55\x28\xca\xcf\x49\x8d\x2f\x48\x2d\xca\xcd\x2c\x2e\xce\xcc\xcf\x2b\xb6\x46\x48\x61\x17\x05\x69\x28\xb6\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xe6\xc8\xff\xd6\x51\x00\x00\x00")

func _000002_default_rolesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesDownSql,
		"000002_default_roles.down.sql",
	)
}

func _000002_default_rolesDownSql() (*asset, error) {
	bytes, err := _000002_default_rolesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.down.sql", size: 81, mode: os.FileMode(0644), modTime: time.Unix(1667765529, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x9e, 0x68, 0x92, 0x2b, 0x78, 0xc1, 0x30, 0x1e, 0x3d, 0xaa, 0x89, 0xe7, 0xd8, 0xa, 0x38, 0x82, 0xd2, 0x53, 0x24, 0x72, 0x9d, 0xca, 0x68, 0x14, 0xfa, 0x4, 0x6f, 0x87, 0x83, 0x6b, 0xa7}}
	return a, nil
}

var __000002_default_rolesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6f\xa3\x30\x10\x86\xef\xfc\x8a\xf7\x46\x23\xb9\x87\x7c\x9c\xda\x53\x37\x8a\x56\x91\x36\x61\xb5\xc9\xee\xb5\x72\xf0\x6c\x18\x09\x6c\x64\xbb\x45\xf9\xf7\x2b\x43\x00\x43\xb7\x52\x6f\xe3\x89\xfd\xcc\x3b\x4f\x78\x7c\xc4\x4f\x53\xbf\x95\xd2\x13\x7c\x41\x50\xd2\xcb\x8b\x74\x84\x86\x7d\x01\xd6\xec\x59\x96\xb0\xa6\x24\x07\xa9\x15\x6a\xb2\x15\x3b\xc7\x46\xbb\xf6\x6e\xf2\x6d\xf7\x7d\x7f\x7c\x4e\x92\xfd\xf1\xb4\xfb\x75\xc6\xfe\x78\xce\xee\xd7\x1f\x58\x09\x78\xf6\x25\x09\x28\x72\xb9\xe5\xda\xb3\xd1\x0b\xfc\x79\xf9\xf1\x7b\x77\x4a\x00\xe0\x61\x29\x90\xbe\xa8\x8a\x75\x2a\x90\x6e\xa5\x46\x6e\x29\x64\x09\xb3\x2a\xa9\xe5\x35\x94\x37\x50\xcd\xce\x07\x28\xeb\x49\xcc\x74\x21\x3a\xce\x4a\x20\x3d\x50\x75\x21\xfb\x39\xc8\x17\xc4\x16\xa6\xd1\x03\x6e\x78\xbe\x16\x48\xb3\x8b\x23\xfb\xde\x01\x32\x5d\xde\x50\x48\x07\x4b\x52\xc1\x84\x93\xcc\x73\x72\x0e\xde\x8c\x61\x7c\x41\xb7\xfb\x1c\x95\x2e\x92\x99\x85\x58\xd5\x97\x5d\xc8\xe0\xe2\x29\xaf\x5c\xbf\x46\x3f\xb6\x20\x6c\x0f\x27\x38\xfe\xb0\xd3\x98\xe7\xbf\x56\xfa\x5f\x9f\xc2\x2a\x3d\xf5\x9d\xa9\x99\xbe\xfd\x6b\x6c\xdb\x28\xcd\xf5\x4a\x2a\x78\x7e\x73\x64\x27\x82\x06\x52\xb7\xf2\x4c\xb4\xa6\xe6\xcb\xb4\x4d\x4c\x53\x54\xd2\x48\xeb\x4e\x90\xc3\x9f\x74\x67\x81\xe6\xac\xb9\xef\xf0\xd5\xbd\x4e\xa4\xb7\x9d\x60\x7e\xec\xbe\xb2\xfa\x20\x7d\xd9\xc7\x5a\x0a\xac\xa2\x7a\x1d\xd5\x9b\x48\xe9\x2a\xaa\xd7\x51\xbd\x89\x64\xad\xda\x78\xdb\xec\x70\xd8\x9f\x9f\xff\x05\x00\x00\xff\xff\x4f\x25\xca\x68\x65\x03\x00\x00")

func _000002_default_rolesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_default_rolesUpSql,
		"000002_default_roles.up.sql",
	)
}

func _000002_default_rolesUpSql() (*asset, error) {
	bytes, err := _000002_default_rolesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_default_roles.up.sql", size: 869, mode: os.FileMode(0644), modTime: time.Unix(1667765787, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0xc4, 0x4, 0xeb, 0xf9, 0xa8, 0x40, 0xad, 0xae, 0xad, 0x42, 0x5, 0x53, 0x5, 0xb6, 0x84, 0xf9, 0x33, 0xa3, 0x4e, 0xef, 0xd3, 0xb, 0x11, 0xdd, 0x31, 0xcc, 0x16, 0xa4, 0xca, 0xbc, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_schema.down.sql": _000001_initial_schemaDownSql,
	"000001_initial_schema.up.sql":   _000001_initial_schemaUpSql,
	"000002_default_roles.down.sql":  _000002_default_rolesDownSql,
	"000002_default_roles.up.sql":    _000002_default_rolesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_schema.down.sql": {_000001_initial_schemaDownSql, map[string]*bintree{}},
	"000001_initial_schema.up.sql": {_000001_initial_schemaUpSql, map[string]*bintree{}},
	"000002_default_roles.down.sql": {_000002_default_rolesDownSql, map[string]*bintree{}},
	"000002_default_roles.up.sql": {_000002_default_rolesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
